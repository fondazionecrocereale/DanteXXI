import 'package:shared_preferences/shared_preferences.dart';
import 'profile_service.dart';
import 'auth_service.dart';

/// Servicio que maneja la gesti√≥n de sesi√≥n del usuario
/// Verifica autom√°ticamente si hay una sesi√≥n activa al iniciar la aplicaci√≥n
class SessionManager {
  static const String _lastLoginKey = 'last_login';

  /// Verificar si hay una sesi√≥n activa al iniciar la aplicaci√≥n
  static Future<bool> checkActiveSession() async {
    try {
      print('üîç SessionManager.checkActiveSession() - Verificando...');
      final profile = await ProfileService.getProfile();
      final hasSession = profile != null;

      if (hasSession) {
        // Hay una sesi√≥n activa, actualizar timestamp de √∫ltimo acceso
        await _updateLastAccess();
        print(
          '‚úÖ SessionManager.checkActiveSession() - Sesi√≥n activa encontrada',
        );
      } else {
        print('‚ùå SessionManager.checkActiveSession() - No hay sesi√≥n activa');
      }

      return hasSession;
    } catch (e) {
      print('‚ùå SessionManager.checkActiveSession() - Error: $e');
      return false;
    }
  }

  /// Obtener informaci√≥n de la sesi√≥n activa
  static Future<Map<String, dynamic>?> getSessionInfo() async {
    try {
      final profile = await ProfileService.getProfile();
      if (profile != null) {
        final prefs = await SharedPreferences.getInstance();
        return {
          'isActive': true,
          'lastAccess': prefs.getString(_lastLoginKey),
          'profile': profile,
        };
      }
      return null;
    } catch (e) {
      print('‚ùå SessionManager.getSessionInfo() - Error: $e');
      return null;
    }
  }

  /// Iniciar sesi√≥n y guardar informaci√≥n de sesi√≥n
  static Future<void> startSession({
    required String id,
    required String email,
    required String firstName,
    required String lastName,
    String? level,
    String? country,
    String? language,
    List<String>? interests,
    String? bio,
    bool? emailNotifications,
    bool? pushNotifications,
    String? learningGoal,
    int? dailyGoalMinutes,
  }) async {
    try {
      print(
        'üöÄ SessionManager.startSession() - Iniciando sesi√≥n para $firstName $lastName',
      );

      // Inicializar datos del usuario usando AuthService
      await AuthService.initializeUserAfterAuth(
        id: id,
        email: email,
        firstName: firstName,
        lastName: lastName,
        level: level,
        country: country,
        language: language,
        interests: interests,
        bio: bio,
        emailNotifications: emailNotifications,
        pushNotifications: pushNotifications,
        learningGoal: learningGoal,
        dailyGoalMinutes: dailyGoalMinutes,
      );

      // Actualizar timestamp de √∫ltimo acceso
      await _updateLastAccess();

      print('‚úÖ SessionManager.startSession() - Sesi√≥n iniciada exitosamente');

      // Debug: verificar estado actual
      await ProfileService.debugCurrentState();
    } catch (e) {
      print('‚ùå SessionManager.startSession() - Error: $e');
      rethrow;
    }
  }

  /// Cerrar sesi√≥n y limpiar datos
  static Future<void> endSession() async {
    try {
      print('üö™ SessionManager.endSession() - Cerrando sesi√≥n...');

      // Limpiar perfil usando ProfileService
      await ProfileService.clearProfile();

      // Limpiar timestamp de √∫ltimo acceso
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_lastLoginKey);

      print('‚úÖ SessionManager.endSession() - Sesi√≥n cerrada exitosamente');
    } catch (e) {
      print('‚ùå SessionManager.endSession() - Error: $e');
      rethrow;
    }
  }

  /// Verificar si la sesi√≥n ha expirado (opcional)
  static Future<bool> isSessionExpired({
    Duration maxAge = const Duration(days: 30),
  }) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastLoginString = prefs.getString(_lastLoginKey);

      if (lastLoginString != null) {
        final lastLogin = DateTime.parse(lastLoginString);
        final now = DateTime.now();
        final difference = now.difference(lastLogin);

        return difference > maxAge;
      }
      return true; // No hay sesi√≥n, considerar como expirada
    } catch (e) {
      return true;
    }
  }

  /// Actualizar timestamp de √∫ltimo acceso
  static Future<void> _updateLastAccess() async {
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now().toIso8601String();
    await prefs.setString(_lastLoginKey, now);
  }

  /// Ejemplo de uso: Iniciar sesi√≥n con usuario de prueba
  static Future<void> startTestSession() async {
    print(
      'üß™ SessionManager.startTestSession() - Iniciando sesi√≥n de prueba...',
    );

    await startSession(
      id: 'e6f1abfb-4d20-4def-a416-96326d0542a5',
      email: 'test6@gmail.com',
      firstName: 'Test6',
      lastName: 'Test6',
      level: 'A1',
      country: null,
      language: 'italiano',
      interests: <String>[],
      bio: null,
      emailNotifications: true,
      pushNotifications: true,
      learningGoal: null,
      dailyGoalMinutes: 30,
    );
  }
}
